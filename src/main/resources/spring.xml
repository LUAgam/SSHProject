<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:cache="http://www.springframework.org/schema/cache" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
               http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"/>
	<!-- 集成Redis缓存框架 -->
	<import resource="applicationContext-redis.xml" />
	<!-- sharding-jdbc配置 -->
	<import resource="sharding-jdbc.xml" />

	<!-- 开启缓存注解 -->
	<cache:annotation-driven cache-manager="cacheManager" />

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="io.aomen.guo">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>


	<!-- 配置hibernate的SessionFactory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="shardingDataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:database="POSTGRESQL" />
		</property>
		<!-- hibernate配置信息 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>

				<!-- 开启二级缓存 ehcache -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}
				</prop>
			</props>
		</property>
		<property name="packagesToScan" value="io.aomen.guo.entity" />
	</bean>


	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Spring Data Jpa配置 -->
	<!-- <jpa:repositories base-package="io.aomen.guo.dao" repository-impl-postfix="Impl" transaction-manager-ref="transactionManager" factory-class="com.joven.jvcore.repository.base.BaseRepositoryFactoryBean" entity-manager-factory-ref="entityManagerFactory" /> -->

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> <tx:attributes> <tx:method name="save*" propagation="REQUIRED" read-only="false" /> <tx:method name="find*" propagation="NEVER" read-only="true" /> <tx:method name="get*" propagation="NEVER" read-only="true" /> <tx:method name="load*" propagation="NEVER" read-only="true" /> </tx:attributes> </tx:advice> <aop:config> <aop:pointcut id="point-cut" expression="execution(* io.aomen.guo.service.impl..* (..))"/> <aop:advisor advice-ref="txAdvice" pointcut-ref="point-cut" /> </aop:config> -->



	<!-- webservice bean -->
	<bean id="baseService" class="io.aomen.guo.webservice.BaseServiceImpl"></bean>

	<!-- <bean id="shiroEhcacheManager" class="org.hibernate.cache.ehcache.EhCacheRegionFactory"> <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml"/> </bean> -->

	<!-- spring自己的管理器，这里定义了三个缓存位置名称 ，既注解中的value -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean class="io.aomen.guo.cache.RedisCache">  <!-- 短期缓存 1个小时 -->
					<property name="redisTemplate" ref="redisTemplate" />
					<property name="name" value="shortTimeCache" />
					<property name="liveTime" value="3600" />
				</bean>
				<bean class="io.aomen.guo.cache.RedisCache"> <!-- 长期缓存 4个小时 -->
					<property name="redisTemplate" ref="redisTemplate" />
					<property name="name" value="longTimeCache" />
					<property name="liveTime" value="14400" />
				</bean>
				<bean class="io.aomen.guo.cache.RedisCache"> <!-- 永久缓存 -->
					<property name="redisTemplate" ref="redisTemplate" />
					<property name="name" value="nerverTimeCache" />
					<property name="liveTime" value="0" />
				</bean>
			</set>
		</property>
	</bean>

	<!-- 打开切面注解 -->
	<aop:aspectj-autoproxy />

	<jpa:repositories base-package="io.aomen.guo.dao" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager" />

	<!-- druid的spring监控 -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>io.aomen.guo.service.impl.*</value>
			</list>
		</property>
	</bean>

	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
</beans>